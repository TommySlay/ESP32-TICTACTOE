#include <Arduino.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_I2CDevice.h>
#include <Wire.h>

#include "functions.h"

// definitions
#include "defines.h"

bool btnPushed = false;
bool btnPushed2 = false;

int pos_x;
int pos_y;

int w = 15;
int h = 15;
int r = 5;

int startPos_x = 13;
int startPos_y = 0;

int pos036_x = 13;
int pos147_x = 36;
int pos258_x = 59;

int pos012_y = 0;
int pos345_y = 22;
int pos678_y = 44;

int pos = 0;

bool switchPlayer = false; // false = player X

int xSet = 0;
int oSet = 0;

bool reset = false;

int drawSum = 0;


int placedX [3][3] = {{0,0,0},{0,0,0},{0,0,0}};
int placedO [3][3] = {{0,0,0},{0,0,0},{0,0,0}};


// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);


//bitmap for grid
static const uint8_t tictactoe_grid[] = {
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};



void setup() {


  pinMode(btnMove, INPUT_PULLDOWN);           // set pin to input
  pinMode(btnEnter, INPUT_PULLDOWN);

  Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  delay(2000);
  display.clearDisplay();

  display.drawBitmap(10, 0, tictactoe_grid, 128, 64, 1); // grid for tic tac toe
  display.display();
  
  pos_x = startPos_x;
  pos_y = startPos_y;



  attachInterrupt(digitalPinToInterrupt(btnMove), isrDebounce, RISING);
  attachInterrupt(digitalPinToInterrupt(btnEnter), isrDebounce2, RISING);

}

void loop() {

  
 

  switch (pos) {
    case 0:

    if(placedX [0][0] == 1 || placedO [0][0] == 1){
      pos++;
    }

    pos_x = pos036_x;
    pos_y = pos012_y;

    if(placedX [0][0] == 0 && placedO [0][0] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);


    blinkRect(pos_x, pos_y, w, h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [0][0] = xSet;
      placedO [0][0] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }

    break;

    case 1:

    if(placedX [0][1] == 1 || placedO [0][1] == 1){
      pos++;
    }

    pos_x = pos147_x;
    pos_y = pos012_y;

    if(placedX [0][1] == 0 && placedO [0][1] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);

    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [0][1] = xSet;
      placedO [0][1] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    break;

    case 2:

    if(placedX [0][2] == 1 || placedO [0][2] == 1){
      pos++;
    }

    pos_x = pos258_x;
    pos_y = pos012_y;

    if(placedX [0][2] == 0 && placedO [0][2] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);

    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [0][2] = xSet;
      placedO [0][2] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    break;

    case 3:

    if(placedX [1][0] == 1 || placedO [1][0] == 1){
      pos++;
    }

    pos_x = pos036_x;
    pos_y = pos345_y;

    if(placedX [1][0] == 0 && placedO [1][0] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);

    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [1][0] = xSet;
      placedO [1][0] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }

    break;

    case 4:

    if(placedX [1][1] == 1 || placedO [1][1] == 1){
      pos++;
    }

    pos_x = pos147_x;
    pos_y = pos345_y;

    if(placedX [1][1] == 0 && placedO [1][1] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);

    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [1][1] = xSet;
      placedO [1][1] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }

    break;

    case 5:

    if(placedX [1][2] == 1 || placedO [1][2] == 1){
      pos++;
    }

    pos_x = pos258_x;
    pos_y = pos345_y;
    
    if(placedX [1][2] == 0 && placedO [1][2] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);
    

    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [1][2] = xSet;
      placedO [1][2] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    
    break;

    case 6:

    if(placedX [2][0] == 1 || placedO [2][0] == 1){
      pos++;
    }

    pos_x = pos036_x;
    pos_y = pos678_y;

    if(placedX [2][0] == 0 && placedO [2][0] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);
    
    
    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [2][0] = xSet;
      placedO [2][0] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    
    break;

    case 7:

    if(placedX [2][1] == 1 || placedO [2][1] == 1){
      pos++;
    }

    pos_x = pos147_x;
    pos_y = pos678_y;

    if(placedX [2][1] == 0 && placedO [2][1] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);
    
    blinkRect(pos_x, pos_y,w,h);
    
    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [2][1] = xSet;
      placedO [2][1] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    break;

    case 8:

    if(placedX [2][2] == 1 || placedO [2][2] == 1){
      pos++;
    }

    pos_x = pos258_x;
    pos_y = pos678_y;

    if(placedX [2][2] == 0 && placedO [2][2] == 0){
    xSet = placeX(pos_x +3, pos_y +3, w-3 + pos_x, h-3 + pos_y, pos_x + w-3, pos_y+3, pos_x+3, h + pos_y-3);
    oSet = placeO(pos_x + w/2, pos_y + h/2, r);
    
    blinkRect(pos_x, pos_y,w,h);

    if(xSet != 0 || oSet != 0){
      drawSum = xSet + oSet + drawSum;
      placedX [2][2] = xSet;
      placedO [2][2] = oSet;
      xSet = 0;
      oSet = 0;
    }

    }
    
    break;


  }

  drawCheck();

  moveRect();

  reset = checkWin();

  if(reset == true){
    resetGame();    
  }
}

//  Functions

void blinkRect(int _pos_x, int _pos_y, int _w, int _h){
  display.drawRect(_pos_x,_pos_y,_w,_h,1);
  delay(200);
  display.display();
  display.drawRect(_pos_x,_pos_y,15,15,0);
  delay(200);
  display.display();
}

void IRAM_ATTR isrDebounce(){
  volatile static unsigned long last_interrupt_time = 0;
  unsigned long interrupt_time = millis();

  if (interrupt_time - last_interrupt_time > 300)
  {
    btnPushed = true;
  }
  last_interrupt_time = interrupt_time;

}

void moveRect(){

    if(btnPushed == true){
    btnPushed = false;

    pos++;

    if(pos >= 9){
    pos = 0;
  }
}
}

int placeX(int _x00X, int _y00X,int _wX, int _hX, int _x10X, int _y10X,int _w1X, int _h1X){

  if(btnPushed2 == true && switchPlayer == false){
    btnPushed2 = false;

    display.drawLine(_x00X,_y00X,_wX,_hX,1);
    display.drawLine(_x10X,_y10X,_w1X,_h1X,1);
    display.display();

    switchPlayer = !switchPlayer;
    xSet++;
    pos++;

    if(pos >= 9){
    pos = 0;
  }

  }
  return xSet;
}

int placeO(int _x00O, int _y00O, int _rO){
  if(btnPushed2 == true && switchPlayer == true){
    btnPushed2 =false;

    display.drawCircle(_x00O, _y00O, _rO, 1);
    display.display();

    switchPlayer = !switchPlayer;
    oSet++;
    pos++;

    if(pos >= 9){
    pos = 0;
    }

  }

  return oSet;

}

void IRAM_ATTR isrDebounce2(){
  volatile static unsigned long last_interrupt_time2 = 0;
  unsigned long interrupt_time2 = millis();

  if (interrupt_time2 - last_interrupt_time2 > 300)
  {
    btnPushed2 = true;
  }
  last_interrupt_time2 = interrupt_time2;

}

bool checkWin(){
  int win = 0;

  if((placedX[0][0] == 1 && placedX[0][1] && placedX[0][2] == 1) ||
     (placedO[0][0] == 1 && placedO[0][1] && placedO[0][2] == 1) ||

     (placedX[1][0] == 1 && placedX[1][1] && placedX[1][2] == 1) ||
     (placedO[1][0] == 1 && placedO[1][1] && placedO[1][2] == 1) ||

     (placedX[2][0] == 1 && placedX[2][1] && placedX[2][2] == 1) ||
     (placedO[2][0] == 1 && placedO[2][1] && placedO[2][2] == 1) ||

     (placedX[0][0] == 1 && placedX[1][0] && placedX[2][0] == 1) ||
     (placedO[0][0] == 1 && placedO[1][0] && placedO[2][0] == 1) ||
     
     (placedX[0][1] == 1 && placedX[1][1] && placedX[2][1] == 1) ||
     (placedO[0][1] == 1 && placedO[1][1] && placedO[2][1] == 1) ||
     
     (placedX[0][2] == 1 && placedX[1][2] && placedX[2][2] == 1) ||
     (placedO[0][2] == 1 && placedO[1][2] && placedO[2][2] == 1) ||

     (placedX[0][0] == 1 && placedX[1][1] && placedX[2][2] == 1) ||
     (placedO[0][0] == 1 && placedO[1][1] && placedO[2][2] == 1) ||

     (placedX[2][0] == 1 && placedX[1][1] && placedX[0][2] == 1) ||
     (placedO[2][0] == 1 && placedO[1][1] && placedO[0][2] == 1)){

      delay(1000);
      win = switchPlayer; 
      
      display.clearDisplay();

      display.setTextSize(2);
      display.setTextColor(1);
      display.setCursor(0,16);

      if(win == 0){

        display.println("WINNER IS");
        display.println("*** O ***");
        display.display();
        
        delay(5000);
        return 1;
      }

      else{
        display.println("WINNER IS");
        display.println("*** X ***");
        display.display();

        delay(5000);
        return 1;
      }
     }
  return 0;
}


void resetGame(){
  int i,j = 0;
  display.clearDisplay();
  pos = 0;
  pos_x = startPos_x;
  pos_y = startPos_y;
  xSet = 0;
  oSet = 0;
  drawSum = 0;


  switchPlayer = false;

  for(i = 0; i<3 ; i++){
    for(j = 0; j<3 ; j++){
      placedX [i][j] = 0;
      placedO [i][j] = 0;
    }
  }

  display.drawBitmap(10, 0, tictactoe_grid, 128, 64, 1); // grid for tic tac toe
  display.display();

}

void drawCheck(){

  if(drawSum == 9){
    delay (1000);
    display.clearDisplay();

    display.setTextSize(2);
    display.setTextColor(1);
    display.setCursor(0,16);
    display.println("** DRAW **");
    display.display();
    delay(5000);

    resetGame();
  }
}


/* winComb 

  012 [0][0] [0][1] [0][2]
  345 [1][0] [1][1] [1][2]
  678 [2][0] [2][1] [2][2]

  036 [0][0] [1][0] [2][0]
  147 [0][1] [1][1] [2][1]
  258 [0][2] [1][2] [2][2]

  048 [0][0] [1][1] [2][2]
  246 [2][0] [1][1] [0][2]

  
*/
